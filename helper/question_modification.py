import re
import pandas as pd
import joblib


CURRENT_RETURN_TYPE = ("", 0)


# Load m√¥ h√¨nh v√† vectorizer
model = joblib.load("data/classifier_model.pkl")
vectorizer = joblib.load("data/vectorizer.pkl")

def classify_line_ml(line: str) -> str:
    global CURRENT_RETURN_TYPE
    vec = vectorizer.transform([line])
    CURRENT_RETURN_TYPE = (model.predict(vec)[0],0)
    return model.predict(vec)[0]

def classify_line(line):
    global CURRENT_RETURN_TYPE
    if re.match(r"^C√¢u\s*\d+", line, re.IGNORECASE):
        CURRENT_RETURN_TYPE = ("question", 0)
        return "question"
    elif re.match(r"^[a-dA-D]\.", line):
        if CURRENT_RETURN_TYPE[0] == "answer":
            CURRENT_RETURN_TYPE = ("answer", (CURRENT_RETURN_TYPE[1] + 1))
        else:
            CURRENT_RETURN_TYPE = ("answer", 0)
        return "answer"
    elif "ƒê√°p √°n" in line or "ƒë√°p √°n" in line.lower():
        CURRENT_RETURN_TYPE = ("correct_answer", 0)
        return "correct_answer"
    else:
        if CURRENT_RETURN_TYPE[0] == "question":
            CURRENT_RETURN_TYPE = ("question", CURRENT_RETURN_TYPE[1] + 1)
            return "question"
        elif CURRENT_RETURN_TYPE == ("answer",3):
            CURRENT_RETURN_TYPE = ("correct_answer", 0)
            return "answer"
        
        return "other"

def question_modify(classified: list[tuple[str, str]]) -> list[dict]: 
    questions = []
    current_question = None
    collecting_question = False

    for line, label in classified:
        clean_line = line.replace("[QUESTION]", "").replace("[ANSWER]", "").replace("[CORRECT_ANSWER]", "").strip()

        if label == "question":
            # N·∫øu l√† b·∫Øt ƒë·∫ßu c√¢u h·ªèi m·ªõi
            if not collecting_question:
                # L∆∞u l·∫°i c√¢u h·ªèi c≈© (n·∫øu c√≥)
                if current_question:
                    if current_question["question"] and current_question["answers"] and current_question["correct"]: 
                        questions.append(current_question)
                current_question = {"question": [clean_line], "answers": [], "correct": None}
                collecting_question = True
            else:
                # N·∫øu ti·∫øp t·ª•c l√† question => n·ªëi th√™m v√†o n·ªôi dung
                current_question["question"].append(clean_line)

        elif label == "answer":
            if current_question:
                current_question["answers"].append(clean_line)
                collecting_question = False  # Ch·∫•m d·ª©t n·ªëi c√¢u h·ªèi n·∫øu g·∫∑p answer

        elif label == "correct_answer":
            if current_question:
                current_question["correct"] = clean_line
                collecting_question = False

                # ‚úÖ Sau khi c√≥ correct_answer ‚Üí x·ª≠ l√Ω l·∫°i danh s√°ch answers
                all_answers = current_question["answers"]
                all_questions = current_question["question"]
                if len(all_answers) > 4:

                    # Gi·ªØ l·∫°i 4 d√≤ng g·∫ßn nh·∫•t tr∆∞·ªõc correct_answer
                    valid_answers = [ans for ans in all_answers[-4:]]
                    # l·∫•y 4 c√°i g·∫ßn nh·∫•t

                    # Nh·ªØng c√°i c√≤n l·∫°i ‚Üí tr·∫£ v·ªÅ l·∫°i c√¢u h·ªèi
                    extra_answers = [ans for ans in all_answers if ans not in valid_answers]

                    # C·∫≠p nh·∫≠t l·∫°i danh s√°ch answer
                    current_question["answers"] = [ans for ans in valid_answers]

                    # Chuy·ªÉn c√°c d√≤ng d∆∞ th√†nh n·ªôi dung c√¢u h·ªèi
                    for extra in extra_answers:
                        current_question["question"].append(extra)
                if len(all_answers) < 2:
                    # N·∫øu ch·ªâ c√≥ 1 ƒë√°p √°n, th√¨ chuy·ªÉn th√†nh c√¢u h·ªèi
                    valid_answers = [ans for ans in all_questions[-(4 - len(all_answers)):]] + all_answers
                    
                    remain_question = [ans for ans in all_questions if ans not in valid_answers]
                    
                    current_question["answers"] = [ans for ans in valid_answers]
                    current_question["question"] = remain_question

    # Th√™m c√¢u h·ªèi cu·ªëi c√πng n·∫øu ch∆∞a th√™m
    if current_question["question"] and current_question["answers"] and current_question["correct"]: 
        questions.append(current_question)

    return questions

def dataframe_convert(questions: list[dict]) -> list[dict]:
    # Chuy·ªÉn ƒë·ªïi th√†nh DataFrame
    data = []
    for i, q in enumerate(questions, 1):
        # N·∫øu ch∆∞a c√≥ ƒë√°p √°n, x·ª≠ l√Ω b·∫±ng AI
        if not q["answers"] or not q["question"]:
            ai_classify = [(line, classify_line_ml(line)) for line in q["question"]]
            ai_classify_modify = question_modify(ai_classify)

            if len(ai_classify_modify) == 1:
                q["question"] = ai_classify_modify[0]["question"]
                q["answers"] = ai_classify_modify[0]["answers"]
            else:
                continue

        # Th√™m b·∫£n g·ªëc
        data.append({
            "C√¢u s·ªë": i,
            "C√¢u h·ªèi": q["question"],
            "ƒê√°p √°n": [a for a in q["answers"]],
            "ƒê√°p √°n ƒë√∫ng": q["correct"]
        })
        
        # Chu·∫©n h√≥a ƒë√°p √°n: b·ªè a./b./c./d.
        answers_clean = [a[2:].strip() if a[:2].lower() in ["a.", "b.", "c.", "d."] else a for a in q["answers"]]

        data.append({
            "C√¢u s·ªë": i,
            "C√¢u h·ªèi": q["question"],
            "ƒê√°p √°n": answers_clean,
            "ƒê√°p √°n ƒë√∫ng": q["correct"]
        })

        # üìå TH√äM B·∫¢N BI·∫æN TH·ªÇ: n·∫øu c√¢u h·ªèi b·∫Øt ƒë·∫ßu b·∫±ng "C√¢u xxx:", t·∫°o th√™m b·∫£n sao c√≥ "c√¢uxxx:"
        match = re.match(r"C√¢u\s*(\d+)", q["question"][0], re.IGNORECASE)
        if match:
            number = match.group(1)
            alt_question = re.sub(r"C√¢u\s*%s" % number, f"c√¢u{number}", q["question"][0], flags=re.IGNORECASE)
            data.append({
                "C√¢u s·ªë": f"{i}_alt",
                "C√¢u h·ªèi": [alt_question],
                "ƒê√°p √°n": answers_clean,
                "ƒê√°p √°n ƒë√∫ng": q["correct"]
            })

    df = pd.DataFrame(data)

    # Ghi ra file Excel
    df.to_excel("output.xlsx", index=False)

    # Ghi ra file JSON
    df.to_json("output.json", force_ascii=False, orient="records", indent=2)

if __name__ == "__main__":
    # V√≠ d·ª• s·ª≠ d·ª•ng
    classified_data = [
        ("[QUESTION] C√¢u 200:  Ch∆∞∆°ng tr√¨nh th·ª±c thi MPI v·ªõi √¥ checkbox ƒë∆∞·ª£c ƒë√°nh d·∫•u nh∆∞ sau d√πng ƒë·ªÉ l√†m g√¨?", "question"),
        ("[ANSWER] ƒê·ªÉ c√°c ti·∫øn tr√¨nh ch·∫°y tr√™n c√°c c·ª≠a s·ªï ƒë·ªôc l·∫≠p v·ªõi nhau", "answer"),
        ("[ANSWER] ƒê·ªÉ ch·∫°y b√¨nh th∆∞·ªùng trong c·ª≠a s·ªï", "answer"),  # ‚ùå g√°n nh·∫ßm
        ("[ANSWER] ƒê·ªÉ c√°c ti·∫øn tr√¨nh ch·∫°y tr√™n c√°c c·ª≠a s·ªï command prompt ƒë·ªôc l·∫≠p v·ªõi nhau", "answer"),
        ("[ANSWER] Kh√¥ng c√¢u n√†o ƒë√∫ng", "answer"),  # ‚ùå g√°n nh·∫ßm
        ("[CORRECT_ANSWER] ƒê√°p √°n: a", "correct_answer"),
        ("[QUESTION] C√¢u 201:  Ch∆∞∆°ng tr√¨nh th·ª±c thi MPI v·ªõi √¥ checkbox ƒë∆∞·ª£c ƒë√°nh d·∫•u nh∆∞ sau d√πng ƒë·ªÉ l√†m g√¨?", "question"),
        ("[ANSWER] ƒê·ªÉ c√°c ti·∫øn tr√¨nh ch·∫°y tr√™n c√°c c·ª≠a s·ªï ƒë·ªôc l·∫≠p v·ªõi nhau", "answer"),
        ("[QUESTION] ƒê·ªÉ ch·∫°y b√¨nh th∆∞·ªùng trong c·ª≠a s·ªï", "question"),  # ‚ùå g√°n nh·∫ßm
        ("[ANSWER] ƒê·ªÉ c√°c ti·∫øn tr√¨nh ch·∫°y tr√™n c√°c c·ª≠a s·ªï command prompt ƒë·ªôc l·∫≠p v·ªõi nhau", "answer"),
        ("[QUESTION] Kh√¥ng c√¢u n√†o ƒë√∫ng", "question"),  # ‚ùå g√°n nh·∫ßm
        ("[CORRECT_ANSWER] ƒê√°p √°n: a", "correct_answer"),
    ]   

    processed_questions = question_modify(classified_data)
    print(processed_questions)
